const char* html_page = "<!DOCTYPE html>"
                        "<html>"
                        "<head>"
                        "<title>Wireless Stepper Motor Controller</title>"
                        "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">"
                        "<style>"
                        "body {"
                        "font-family: 'Segoe UI', Arial, sans-serif;"
                        "margin: 0;"
                        "padding: 20px;"
                        "background-color: #f5f5f5;"
                        "}"
                        ".dashboard {"
                        "max-width: 1200px;"
                        "margin: 0 auto;"
                        "display: flex;"
                        "flex-direction: column;"
                        "gap: 30px;"
                        "}"
                        ".main-controls, .additional-controls {"
                        "display: grid;"
                        "grid-template-columns: repeat(2, 1fr);"
                        "gap: 30px;"
                        "width: 100%;"
                        "}"
                        ".card {"
                        "background: white;"
                        "border-radius: 10px;"
                        "padding: 20px;"
                        "box-shadow: 0 2px 4px rgba(0,0,0,0.1);"
                        "margin: 0;"
                        "}"
                        "@media (max-width: 768px) {"
                        ".main-controls, .additional-controls {"
                        "grid-template-columns: 1fr;"
                        "}"
                        "}"
                        ".card-header {"
                        "font-size: 1.2em;"
                        "font-weight: bold;"
                        "color: #333;"
                        "margin-bottom: 15px;"
                        "padding-bottom: 10px;"
                        "border-bottom: 2px solid #eee;"
                        "display: flex;"
                        "justify-content: space-between;"
                        "align-items: center;"
                        "cursor: pointer;"
                        "}"
                        ".card-content {"
                        "transition: max-height 0.3s ease-out;"
                        "overflow: hidden;"
                        "}"
                        ".card.collapsed .card-content {"
                        "max-height: 0;"
                        "margin: 0;"
                        "padding: 0;"
                        "}"
                        ".toggle-icon {"
                        "width: 20px;"
                        "height: 20px;"
                        "position: relative;"
                        "transition: transform 0.3s;"
                        "}"
                        ".toggle-icon::before, .toggle-icon::after {"
                        "content: '';"
                        "position: absolute;"
                        "background-color: #666;"
                        "transition: transform 0.3s;"
                        "}"
                        ".toggle-icon::before {"
                        "width: 2px;"
                        "height: 12px;"
                        "top: 4px;"
                        "left: 9px;"
                        "}"
                        ".toggle-icon::after {"
                        "width: 12px;"
                        "height: 2px;"
                        "top: 9px;"
                        "left: 4px;"
                        "}"
                        ".card.collapsed .toggle-icon::before {"
                        "transform: rotate(90deg);"
                        "}"
                        ".card.collapsed .toggle-icon::after {"
                        "transform: rotate(0deg);"
                        "}"
                        ".card:not(.collapsed) .toggle-icon::before {"
                        "transform: rotate(0deg);"
                        "}"
                        ".card:not(.collapsed) .toggle-icon::after {"
                        "transform: rotate(0deg);"
                        "}"
                        ".control-group {"
                        "margin: 15px 0;"
                        "}"
                        ".status-value {"
                        "font-size: 24px;"
                        "font-weight: bold;"
                        "color: #2196F3;"
                        "margin: 10px 0;"
                        "}"
                        ".unit {"
                        "font-size: 14px;"
                        "color: #666;"
                        "margin-left: 5px;"
                        "}"
                        "button {"
                        "background-color: #2196F3;"
                        "color: white;"
                        "border: none;"
                        "padding: 10px 20px;"
                        "border-radius: 5px;"
                        "cursor: pointer;"
                        "font-size: 14px;"
                        "margin: 5px;"
                        "transition: background-color 0.3s;"
                        "}"
                        "button:hover {"
                        "background-color: #1976D2;"
                        "}"
                        "button.stop {"
                        "background-color: #f44336;"
                        "}"
                        "button.stop:hover {"
                        "background-color: #d32f2f;"
                        "}"
                        "button.toggle {"
                        "background-color: #4CAF50;"
                        "transition: all 0.3s ease;"
                        "}"
                        "button.toggle.disabled {"
                        "background-color: #f44336;"
                        "}"
                        "button.toggle:hover {"
                        "opacity: 0.9;"
                        "}"
                        "button.direction {"
                        "background-color: #2196F3;"
                        "transition: all 0.3s ease;"
                        "}"
                        "button.direction.backward {"
                        "background-color: #FF9800;"
                        "}"
                        "select, input {"
                        "padding: 8px;"
                        "border: 1px solid #ddd;"
                        "border-radius: 5px;"
                        "margin: 5px;"
                        "font-size: 14px;"
                        "width: 120px;"
                        "}"
                        ".status-indicator {"
                        "display: inline-block;"
                        "width: 10px;"
                        "height: 10px;"
                        "border-radius: 50%;"
                        "margin-right: 5px;"
                        "}"
                        ".status-connected {"
                        "background-color: #4CAF50;"
                        "}"
                        ".status-disconnected {"
                        "background-color: #f44336;"
                        "}"
                        ".slider-container {"
                        "margin: 15px 0;"
                        "padding: 10px;"
                        "background: #f8f9fa;"
                        "border-radius: 5px;"
                        "}"
                        ".slider-value {"
                        "font-size: 18px;"
                        "font-weight: bold;"
                        "color: #2196F3;"
                        "text-align: center;"
                        "margin: 10px 0;"
                        "}"
                        "input[type=\"range\"] {"
                        "width: 100%;"
                        "height: 8px;"
                        "background: #ddd;"
                        "border-radius: 4px;"
                        "outline: none;"
                        "margin: 10px 0;"
                        "}"
                        "input[type=\"range\"]::-webkit-slider-thumb {"
                        "appearance: none;"
                        "width: 20px;"
                        "height: 20px;"
                        "background: #2196F3;"
                        "border-radius: 50%;"
                        "cursor: pointer;"
                        "}"
                        "input[type=\"range\"]::-moz-range-thumb {"
                        "width: 20px;"
                        "height: 20px;"
                        "background: #2196F3;"
                        "border-radius: 50%;"
                        "cursor: pointer;"
                        "border: none;"
                        "}"
                        ".site-header {"
                        "text-align: center;"
                        "padding: 20px 0;"
                        "margin-bottom: 30px;"
                        "}"
                        ".site-title {"
                        "font-size: 2.2em;"
                        "font-weight: bold;"
                        "color: #2196F3;"
                        "margin: 0;"
                        "}"
                        ".site-credit {"
                        "font-size: 1em;"
                        "color: #666;"
                        "margin-top: 5px;"
                        "}"
                        "</style>"
                        "</head>"
                        "<body>"
                        "<div class=\"dashboard\">"
                        "<div class=\"site-header\">"
                        "<h1 class=\"site-title\">Wireless Stepper Motor Controller</h1>"
                        "<div class=\"site-credit\">By Circuit Digest</div>"
                        "</div>"

                        "<div class=\"additional-controls\">"
                        "<div class=\"card collapsed\" id=\"configCard\">"
                        "<div class=\"card-header\" onclick=\"toggleCard('configCard')\">"
                        "Motor Configuration"
                        "<div class=\"toggle-icon\"></div>"
                        "</div>"
                        "<div class=\"card-content\">"
                        "<div class=\"control-group\">"
                        "<label>Current (mA):</label>"
                        "<input type=\"number\" id=\"current\" min=\"100\" max=\"3000\" value=\"1000\" step=\"100\">"
                        "<button onclick=\"setCurrent()\">Set</button>"
                        "</div>"
                        "<div class=\"control-group\">"
                        "<label>Microstepping:</label>"
                        "<select id=\"microsteps\" onchange=\"setMicrostepping()\">"
                        "<option value=\"1\">Full Step (1)</option>"
                        "<option value=\"2\">Half Step (2)</option>"
                        "<option value=\"4\">Quarter Step (4)</option>"
                        "<option value=\"8\">1/8 Step (8)</option>"
                        "<option value=\"16\" selected>1/16 Step (16)</option>"
                        "<option value=\"32\">1/32 Step (32)</option>"
                        "<option value=\"64\">1/64 Step (64)</option>"
                        "<option value=\"128\">1/128 Step (128)</option>"
                        "<option value=\"256\">1/256 Step (256)</option>"
                        "</select>"
                        "</div>"
                        "</div>"
                        "</div>"

                        "<div class=\"card collapsed\" id=\"systemCard\">"
                        "<div class=\"card-header\" onclick=\"toggleCard('systemCard')\">"
                        "System Status"
                        "<div class=\"toggle-icon\"></div>"
                        "</div>"
                        "<div class=\"card-content\">"
                        "<div id=\"status\" class=\"control-group\">Status: Disconnected</div>"
                        "</div>"
                        "</div>"

                        "<div class=\"card collapsed\" id=\"pdCard\">"
                        "<div class=\"card-header\" onclick=\"toggleCard('pdCard')\">"
                        "PD Power Control"
                        "<div class=\"toggle-icon\"></div>"
                        "</div>"
                        "<div class=\"card-content\">"
                        "<div class=\"control-group\">"
                        "<label>Select Voltage Profile:</label>"
                        "<select id=\"pdProfile\" onchange=\"setPDProfile()\">"
                        "<option value=\"5,3\">5V</option>"
                        "<option value=\"9,2\">9V</option>"
                        "<option value=\"12,1.5\">12V</option>"
                        "<option value=\"15,2\">15V</option>"
                        "</select>"
                        "</div>"

                        "</div>"
                        "</div>"
                        "</div>"

                        "<div class=\"main-controls\">"
                        "<div class=\"card\">"
                        "<div class=\"card-header\">Motor Control</div>"
                        "<div class=\"card-content\">"
                        "<div class=\"control-group\">"
                        "<button id=\"toggleButton\" class=\"toggle\" onclick=\"toggleMotor()\">Enable Motor</button>"
                        "<button class=\"stop\" onclick=\"stopMotor()\">Emergency Stop</button>"
                        "</div>"
                        "<div class=\"control-group\">"
                        "<button id=\"directionButton\" class=\"direction\" onclick=\"toggleDirection()\">Forward</button>"
                        "</div>"
                        "<div class=\"control-group\">"
                        "<label>Speed (1-10):</label>"
                        "<input type=\"number\" id=\"speed\" min=\"1\" max=\"10\" value=\"5\">"
                        "<button onclick=\"setSpeed()\">Set</button>"
                        "</div>"
                        "<div class=\"control-group\">"
                        "<label>Steps:</label>"
                        "<input type=\"number\" id=\"steps\" min=\"1\" value=\"1000\">"
                        "<button onclick=\"moveMotor()\">Move</button>"
                        "</div>"
                        "<div class=\"control-group\">"
                        "<div class=\"slider-container\">"
                        "<label>Target Angle:</label>"
                        "<div id=\"angleValue\" class=\"slider-value\">0&#176;</div>"
                        "<input type=\"range\" id=\"targetAngle\" min=\"0\" max=\"360\" value=\"0\" step=\"1\" oninput=\"updateAngleValue(this.value)\">"
                        "</div>"
                        "<button onclick=\"setTargetAngle()\">Move to Angle</button>"
                        "</div>"
                        "</div>"
                        "</div>"

                        "<div class=\"card\">"
                        "<div class=\"card-header\">Motor Status</div>"
                        "<div class=\"card-content\">"
                        "<div class=\"control-group\">"
                        "<div>Current Angle</div>"
                        "<div id=\"rawAngle\" class=\"status-value\">0<span class=\"unit\">°</span></div>"
                        "</div>"
                        "<div class=\"control-group\">"
                        "<div>Speed</div>"
                        "<div id=\"currentSpeed\" class=\"status-value\">0<span class=\"unit\">rpm</span></div>"
                        "</div>"
                        "<div class=\"control-group\">"
                        "<div>Motor Current</div>"
                        "<div id=\"motorCurrent\" class=\"status-value\">0<span class=\"unit\">mA</span></div>"
                        "</div>"

                        "<div class=\"control-group\">"
                        "<div>Temperature</div>"
                        "<div id=\"temperature\" class=\"status-value\">0<span class=\"unit\">°C</span></div>"
                        "</div>"
                        "</div>"
                        "</div>"
                        "</div>"
                        "</div>"

                        "<script>"
                        "let isMotorEnabled = false;"
                        "let isForward = true;"

                        "function toggleMotor() {"
                        "const button = document.getElementById('toggleButton');"
                        "if (!isMotorEnabled) {"
                        "fetch('/enable')"
                        ".then(response => response.text())"
                        ".then(data => {"
                        "updateStatus(data);"
                        "isMotorEnabled = true;"
                        "button.textContent = 'Disable Motor';"
                        "button.classList.add('disabled');"
                        "});"
                        "} else {"
                        "fetch('/disable')"
                        ".then(response => response.text())"
                        ".then(data => {"
                        "updateStatus(data);"
                        "isMotorEnabled = false;"
                        "button.textContent = 'Enable Motor';"
                        "button.classList.remove('disabled');"
                        "});"
                        "}"
                        "}"

                        "function toggleDirection() {"
                        "const button = document.getElementById('directionButton');"
                        "isForward = !isForward;"
                        "console.log('Setting direction to:', isForward ? 'Forward' : 'Backward');"
                        "fetch('/direction?dir=' + isForward)"
                        ".then(response => response.text())"
                        ".then(data => {"
                        "console.log('Server response:', data);"
                        "updateStatus(data);"
                        "button.textContent = isForward ? 'Forward' : 'Backward';"
                        "button.classList.toggle('backward');"
                        "})"
                        ".catch(error => {"
                        "console.error('Error:', error);"
                        "updateStatus('Error setting direction: ' + error);"
                        "});"
                        "}"

                        "function updateStatus(text) {"
                        "document.getElementById('status').innerHTML = 'Status: ' + text;"
                        "}"

                        "function stopMotor() {"
                        "fetch('/stop')"
                        ".then(response => response.json())"
                        ".then(data => {"
                        "updateStatus(data.status);"
                        "isMotorEnabled = data.motorEnabled;"
                        "const button = document.getElementById('toggleButton');"
                        "button.textContent = 'Enable Motor';"
                        "button.classList.remove('disabled');"
                        "});"
                        "}"

                        "function setSpeed() {"
                        "const speed = document.getElementById('speed').value;"
                        "fetch('/speed?value=' + speed)"
                        ".then(response => response.text())"
                        ".then(data => updateStatus(data));"
                        "}"

                        "function moveMotor() {"
                        "const steps = document.getElementById('steps').value;"
                        "fetch('/move?steps=' + steps)"
                        ".then(response => response.text())"
                        ".then(data => updateStatus(data));"
                        "}"

                        "function setTargetAngle() {"
                        "const angle = parseInt(document.getElementById('targetAngle').value);"
                        "console.log('Setting target angle:', angle);"

                        "if (angle >= 0 && angle <= 360) {"
                        "fetch('/set_angle?angle=' + angle)"
                        ".then(response => response.text())"
                        ".then(data => {"
                        "console.log('Server response:', data);"
                        "updateStatus(data);"
                        "})"
                        ".catch(error => {"
                        "console.error('Error:', error);"
                        "updateStatus('Error setting angle: ' + error);"
                        "});"
                        "} else {"
                        "updateStatus('Invalid angle. Please enter a value between 0 and 360.');"
                        "}"
                        "}"

                        "function setMicrostepping() {"
                        "const microsteps = document.getElementById('microsteps').value;"
                        "fetch('/microsteps?value=' + microsteps)"
                        ".then(response => response.text())"
                        ".then(data => {"
                        "updateStatus(data);"
                        "});"
                        "}"

                        "function updateEncoderStatus() {"
                        "fetch('/encoder')"
                        ".then(response => response.json())"
                        ".then(data => {"
                        "var rpm = (data.speed * 60) / 360;"
                        "document.getElementById('currentSpeed').innerHTML = rpm.toFixed(1) + '<span class=\\\"unit\\\">rpm</span>';"
                        "document.getElementById('rawAngle').innerHTML = data.rawAngle.toFixed(1) + '<span class=\\\"unit\\\">&#176;</span>';"
                        "document.getElementById('motorCurrent').innerHTML = data.current + '<span class=\\\"unit\\\">mA</span>';"
                        "});"
                        "}"

                        "function updatePowerStatus() {"
                        "fetch('/power_status')"
                        ".then(response => response.json())"
                        ".then(data => {"
                        "const pdVoltage = document.getElementById('pdVoltage');"
                        "const pdStatus = document.getElementById('pdStatus');"
                        "if (data.pd_connected) {"
                        "pdVoltage.innerHTML = data.voltage.toFixed(2) + '<span class=\"unit\">V</span>';"
                        "pdStatus.innerHTML = data.voltage.toFixed(2) + 'V / ' + data.current.toFixed(2) + 'A';"
                        "} else if (data.pd_negotiated) {"
                        "pdVoltage.innerHTML = 'Negotiating...';"
                        "pdStatus.innerHTML = 'Power Negotiation in Progress';"
                        "} else {"
                        "pdVoltage.innerHTML = 'No PD';"
                        "pdStatus.innerHTML = 'Not Connected';"
                        "}"
                        "});"
                        "}"

                        "function setPDProfile() {"
                        "const profile = document.getElementById('pdProfile').value.split(',');"
                        "const voltage = parseFloat(profile[0]);"
                        "const current = parseFloat(profile[1]);"

                        "fetch('/set_pd', {"
                        "method: 'POST',"
                        "headers: { 'Content-Type': 'application/json' },"
                        "body: JSON.stringify({ voltage: voltage, current: current })"
                        "})"
                        ".then(response => response.json())"
                        ".then(data => {"
                        "if (data.success) {"
                        "updateStatus('Power profile ' + voltage + 'V/' + current + 'A set successfully');"
                        "} else {"
                        "updateStatus('Failed to set power profile: ' + data.message);"
                        "}"
                        "});"
                        "}"

                        "setInterval(function() {"
                        "fetch('/status')"
                        ".then(response => response.text())"
                        ".then(data => {"
                        "const status = JSON.parse(data);"
                        "document.getElementById('temperature').innerHTML = status.temperature.toFixed(1) + '<span class=\\\"unit\\\">&#176;C</span>';"
                        "});"
                        "}, 1000);"

                        "setInterval(updateEncoderStatus, 100);"
                        "setInterval(updatePowerStatus, 1000);"
                        "updatePowerStatus();"

                        "function setCurrent() {"
                        "const current = document.getElementById('current').value;"
                        "fetch('/current?value=' + current)"
                        ".then(response => response.text())"
                        ".then(data => updateStatus(data));"
                        "}"

                        "function updateAngleValue(value) {"
                        "document.getElementById('angleValue').innerHTML = value + '°';"
                        "}"

                        "function toggleCard(cardId) {"
                        "const card = document.getElementById(cardId);"
                        "card.classList.toggle('collapsed');"
                        "}"
                        "</script>"
                        "</body>"
                        "</html>";